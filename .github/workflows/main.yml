name: CI/CD Pipeline for React

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build-and-deploy-v3-to-v4:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image for v3
      run: |
        docker build -t vk2615/react-v3:latest -f ./react-v3/Dockerfile ./react-v3
        docker push vk2615/react-v3:latest
    - name: Build and push Docker image for v4
      run: |
        docker build -t vk2615/react-v4:latest -f ./react-v4/Dockerfile ./react-v4
        docker push vk2615/react-v4:latest
    - name: SSH into server and deploy to Docker Swarm (rolling update v3 to v4)
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Pull the latest image for v3 and v4 from DockerHub
          docker pull vk2615/react-v3:latest
          docker pull vk2615/react-v4:latest
          # Check if the v3 service is running
          if docker service ls | grep -q "react-v3"; then
            echo "v3 service exists, updating it to v4"
            # Perform rolling update to v4
            docker service update --image vk2615/react-v4:latest react-v3
          else
            echo "v3 service does not exist, creating it"
            # If v3 service doesn't exist, create it
            docker service create --name react-v3 --replicas 2 -p 8080:80 vk2615/react-v3:latest
          fi
          # Optionally, you can verify the update by checking the service
          echo "Rolling update complete. Verifying the service update..."
          docker service ls